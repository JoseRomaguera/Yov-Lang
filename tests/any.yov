
main :: ()
{
    a: Any;
    
    b: Any = 10;
    println(b);
    println(custom_string(b));
    
    b = "Hello";
    
    if (b == "Hello") {
        println(b);
        println(custom_string(b));
    }
    
    b = true;
    
    println(custom_string(b));
    
    println(return_any(0));
    
    r0 := return_any(0);
    if (r0 is Int) {
        r0 += 5;
        assert(r0 == 6);
    }
    else assert(false);
    
    r1 := return_any(1);
    if (r1 is String) assert(r1 == "A");
    else assert(false);
    
    r0 = return_any(0);
    if (r0 is Int) {
        r0 += 5;
        println(r0);
        assert(r0 == 6);
    }
    else assert(false);
    
    r1 = return_tuple(1);
    if (r1 is String) assert(r1 == "A");
    else assert(false);
}

custom_string :: (v: Any) -> String
{
    if (v is Int) {
        r := v + 0;
        return "Int: {r}";
    }
    else if (v is String) {
        r := v + "";
        return "String: {r}";
    }
    else {
        return "Unknown type: {typeof(v).name}";
    }
}

return_any :: (i: Int) -> Any
{
    if (i == 0) return 1;
    if (i == 1) return "A";
    if (i == 2) return false;
    return -1;
}

return_tuple :: (i: Int) -> (a: Any, b: Int)
{
    b = i;
    a = return_any(b);
}
