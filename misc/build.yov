
script_description :: "This script builds the Yov programming language.
It can be run in different modes depending on your development or distribution needs.";

Mode :: enum { Dev, Dist, Manual }
mode :: arg -> Mode {
    default = .Dist;
    description = "specifies the build mode. Available options: {Mode.array}";
}
profiler_enabled :: arg {
    name = "-profiler";
    description = "enables Tracy profiler (WIP)";
}

param_dev := false;
param_optimize := true;

if (mode == Mode.Dev) {
    param_dev = true;
    param_optimize = false;
}
else if (mode == Mode.Dist) {
}
else if (mode == Mode.Manual) {
    param_dev = ask_yesno("dev");
    param_optimize = ask_yesno("optimize");
}
else {
    println("Unknown mode '{mode}'");
    exit();
}

APP_NAME := "yov";

root_path := context.script_dir / "..";
set_cd(root_path);

//- Generate help.h
{
    HELP_EXPR_NAME :: "YOV_HELP_STR";
    call("yov misc/generate_string_literal.yov -src_path={root_path}code/help.txt -dst_path={root_path}code/autogenerated/help.h -expr_name={HELP_EXPR_NAME}");
}
//- Build 
{
    create_directory("build", true);
    set_cd("build");
    
    defines: String[];
    libs:    String[];
    cflags:  String[];
    lflags:  String[];
    
    // Defines
    {
        if (param_dev) defines += "DEV";
    }
    
    // Libs
    {
        libs += "kernel32.lib";
        libs += "user32.lib";
    }
    
    // Flags
    {
        cflags += "std:c17";
        cflags += "nologo";
        
        cflags += { "W2", "we4305", "we4244", "wd4146" };
        
        cflags += { "GR-", "Os" };
        if (param_optimize) cflags += "O2";
        else cflags += "Zi";
        cflags += "Oi-";
        
        if (param_optimize) {
            cflags += "EHs-c-";
            cflags += "GS-";
            lflags += "NODEFAULTLIB";
            lflags += "DEBUG:NONE";
        }
        
        lflags += { "IGNORE:4210" };
        lflags += { "MERGE:.rdata=.", "MERGE:.pdata=.", "MERGE:text=.", "SECTION:.,ER" };
        lflags += { "ENTRY:main", "SUBSYSTEM:CONSOLE" };
        lflags += "incremental:no";
        lflags += "out:{APP_NAME}.exe";
        lflags += "PDB:{APP_NAME}.pdb";
    }
    
    // Call msvc
    
    msvc: String = "cl {root_path}code/main.cpp ";
    for (def : defines) msvc += "/D{def}=1 ";
    for (lib : libs)    msvc += "{lib} ";
    for (flag : cflags) msvc += "/{flag} ";
    msvc += "/I code/ /link ";
    for (flag : lflags) msvc += "/{flag} ";
    
    result: Int = call(msvc);
    
    if (result != 0) {
        print("Can't compile!!\n");
        exit();
    }
}

print("Build finished!!\n");