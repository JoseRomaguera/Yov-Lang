
script_description :: "This script builds the Yov programming language.
It can be run in different modes depending on your development or distribution needs.";

Mode :: enum { Dev, Dist, Manual }
mode :: arg -> Mode {
    default = .Dist;
    description = "specifies the build mode. Available options: {Mode.array}";
}
profiler_enabled :: arg {
    name = "-profiler";
    description = "enables Tracy profiler (WIP)";
}

main :: ()
{
    param_dev := false;
    param_optimize := true;
    
    if (mode == Mode.Dev) {
        param_dev = true;
        param_optimize = false;
    }
    else if (mode == Mode.Manual) {
        param_dev = ask_yesno("dev");
        param_optimize = ask_yesno("optimize");
    }
    
    APP_NAME := "yov";
    
    root_path := context.script_dir / "..";
    set_cd(root_path);
    
    //- Generate help.h
    {
        calls.redirect_stdout = .Ignore;
        HELP_EXPR_NAME :: "YOV_HELP_STR";
        call_script("misc/generate_string_literal.yov", "-src_path={root_path}code/help.txt -dst_path={root_path}code/autogenerated/help.h -expr_name={HELP_EXPR_NAME}", "");
    }
    //- Build 
    {
        create_directory("build", true);
        set_cd("build");
        
        defines: String[];
        libs:    String[];
        cflags:  String[];
        lflags:  String[];
        
        // Defines
        {
            if (param_dev) defines += "DEV";
        }
        
        // Libs
        {
            libs += "kernel32.lib";
            libs += "user32.lib";
        }
        
        // Flags
        {
            cflags += {
                "std:c17", "nologo",
                "W2", "we4305", "we4244", "wd4146",
                "GR-", "Os"
            };
            
            if (param_optimize) cflags += "O2";
            else cflags += "Zi";
            cflags += "Oi-";
            
            if (param_optimize) {
                cflags += { "EHs-c-", "GS-", "DEBUG:NONE" };
            }
            
            lflags += { "IGNORE:4210" };
            lflags += { "MERGE:.rdata=.", "MERGE:.pdata=.", "MERGE:text=.", "SECTION:.,ER" };
            lflags += { "ENTRY:main", "SUBSYSTEM:CONSOLE", "incremental:no" };
            lflags += { "out:{APP_NAME}.exe", "PDB:{APP_NAME}.pdb" };
        }
        
        // Call msvc
        
        msvc: String = "cl {root_path}code/main.cpp ";
        for (def : defines) msvc += "/D{def}=1 ";
        for (lib : libs)    msvc += "{lib} ";
        for (flag : cflags) msvc += "/{flag} ";
        msvc += "/I code/ /link ";
        for (flag : lflags) msvc += "/{flag} ";
        
        msvc_import_env_x64();
        
        calls.redirect_stdout = .Console;
        call(msvc);
        
        set_cd(root_path);
    }
    //- Run tests
    if (mode == .Dist) {
        calls.redirect_stdout = .Console;
        call_exe("build/yov", "misc/run_tests.yov");
    }
}