
Result :: struct {
    failed: Bool;
    message: String;
    code: Int;
}

YovInfo :: struct {
    path: String;
    version: String;
    major: Int;
    minor: Int;
    revision: Int;
}

Type :: struct {
    ID: Int;
    name: String;
}

Context :: struct {
    cd: String;
    script_dir: String;
    caller_dir: String;
    args: String[];
    types: Type[];
}

OSKind :: enum {
    Windows, Linux
}

OS :: struct {
    kind: OSKind;
}

RedirectStdout :: enum {
    Console, Ignore, Script, ImportEnv
}

CallsContext :: struct {
    redirect_stdout: RedirectStdout;
}

yov     :: YovInfo();
context :: Context();
os      :: OS();
calls   :: CallsContext();

// Core

typeof  :: (object: Any) -> Type;
print   :: (object: Any);
println :: (object: Any);
exit    :: (exit_code: Int);
set_cd  :: (cd: String) -> Result;
assert  :: (result: Bool) -> Result;
failed :: (message: String, exit_code: Int) -> Result;

env            :: (name: String) -> (value: String, result: Result);
env_path       :: (name: String) -> (value: String, result: Result);
env_path_array :: (name: String) -> (value: String[], result: Result);

// External Calls

CallOutput :: struct {
    stdout: String;
}

call        :: (command: String) -> (out: CallOutput, result: Result);
call_exe    :: (path: String, arguments: String) -> (out: CallOutput, result: Result);
call_script :: (path: String, arguments: String, yov_arguments: String) -> (out: CallOutput, result: Result);

// String Utils
path_resolve :: (path: String) -> String;
str_get_codepoint :: (str: String, cursor: Int) -> (codepoint: Int, next_cursor: Int);
str_split :: (str: String, separator: String) -> String[];

// Yov
yov_require     :: (major: Int, minor: Int) -> Result;
yov_require_min :: (major: Int, minor: Int) -> Result;
yov_require_max :: (major: Int, minor: Int) -> Result;

// User
ask_yesno :: (text: String) -> Bool;

// File System

CopyMode :: enum {
    NoOverride,
    Override,
}

FileInfo :: struct {
    path: String;
    is_directory: Bool;
}

exists             :: (path: String) -> Bool;
create_directory   :: (path: String, recursive: Bool) -> Result;
delete_directory   :: (path: String) -> Result;
copy_directory     :: (dst: String, src: String) -> Result;
move_directory     :: (dst: String, src: String) -> Result;
copy_file          :: (dst: String, src: String, mode: CopyMode) -> Result;
move_file          :: (dst: String, src: String) -> Result;
delete_file        :: (path: String) -> Result;
read_entire_file   :: (path: String) -> (content: String, result: Result);
write_entire_file  :: (path: String, content: String) -> Result;
file_get_info      :: (path: String) -> (info: FileInfo, result: Result);
dir_get_files_info :: (path: String) -> (infos: FileInfo[], result: Result);

// MSVC

msvc_import_env_x64 :: () -> Result;
msvc_import_env_x86 :: () -> Result;
