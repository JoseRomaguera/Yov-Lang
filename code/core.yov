
YovInfo :: struct {
    path: String;
    version: String;
    major: Int;
    minor: Int;
    revision: Int;
}

Type :: struct {
    ID: Int;
    name: String;
}

Context :: struct {
    cd: String;
    script_dir: String;
    caller_dir: String;
    args: String[];
    types: Type[];
}

OSKind :: enum {
    Windows, Linux
}

OS :: struct {
    kind: OSKind;
}

RedirectStdout :: enum {
    Console, Ignore, Script
}

CallsContext :: struct {
    redirect_stdout: RedirectStdout;
}

yov     :: YovInfo();
context :: Context();
os      :: OS();
calls   :: CallsContext();

// Core
typeof  :: (object: Any) -> Type;
print   :: (object: Any);
println :: (object: Any);
exit    :: (exit_code: Int);
set_cd  :: (cd: String);
assert  :: (result: Bool) -> Bool;

// External Calls

CallResult :: struct {
    stdout: String;
    exit_code: Int;
}

call        :: (command: String) -> CallResult;
call_exe    :: (path: String, arguments: String) -> CallResult;
call_script :: (path: String, arguments: String, yov_arguments: String) -> CallResult;

// String Utils
path_resolve :: (path: String) -> String;
str_get_codepoint :: (str: String, cursor: Int&) -> Int;

// Yov
yov_require     :: (major: Int, minor: Int);
yov_require_min :: (major: Int, minor: Int);
yov_require_max :: (major: Int, minor: Int);

// User
ask_yesno :: (text: String) -> Bool;

// File System

CopyMode :: enum {
    NoOverride,
    Override,
}

FileInfo :: struct {
    path: String;
    is_directory: Bool;
}

exists             :: (path: String) -> Bool;
create_directory   :: (path: String, recursive: Bool) -> Bool;
delete_directory   :: (path: String) -> Bool;
copy_directory     :: (dst: String, src: String) -> Bool;
move_directory     :: (dst: String, src: String) -> Bool;
copy_file          :: (dst: String, src: String, mode: CopyMode) -> Bool;
move_file          :: (dst: String, src: String) -> Bool;
delete_file        :: (path: String) -> Bool;
read_entire_file   :: (path: String, content: String&) -> Bool;
write_entire_file  :: (path: String, content: String) -> Bool;
file_get_info      :: (path: String) -> FileInfo;
dir_get_files_info :: (path: String) -> FileInfo[];
