
callee :: arg {
    description = "indicates whether the script is being called instead of doing the calling.";
}

output :: arg -> Int {
    description = "sets the exit code returned by the script (only for the callees)";
    default = 0;
}

if (callee) {
    print("Output from external script");
    exit(output);
}

result: CallResult;

// Redirect external call output to the console
// This option is set by default
calls.redirect_stdout = RedirectStdout.Console;

// Run a raw command using 'call'
println("-> 'call'");
result = call("{yov.path} external_calls.yov -callee");
println("\nresult = {result}\n");

// Suppress output from external calls
calls.redirect_stdout = RedirectStdout.Ignore;

yov_path_without_extension := "{yov.path}" / ".." / "yov";

// Use 'call_exe' to invoke an executable without specifying its extension
// The correct file is automatically chosen based on the OS
println("-> 'call_exe'");
result = call_exe("{yov_path_without_extension}", "external_calls.yov -callee");
println("result = {result}\n");

// Capture and return the output of the call
calls.redirect_stdout = RedirectStdout.Script;

// Use 'call_script' to run another Yov script
println("-> 'call_script' (output = 0)");
result = call_script("external_calls.yov", "-callee -output=0", "");
println("result = {result}\n");

println("-> 'call_script' (output = 10)");
result = call_script("external_calls.yov", "-callee -output=10", "");
println("result = {result}");